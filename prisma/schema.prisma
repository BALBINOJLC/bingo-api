// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EUserRole {
  ADMIN
  CLIENT
  OWNER
  USER
  SUPER_ADMIN
  GUEST
}

enum EUserStatus {
  AUTORIZED
  PENDING
  CHEKING
  LOCKED
  REJECTED
}

model Base {
  id          String    @id @default(uuid()) @map("_id")
  name        String
  description String
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  is_deleted  Boolean   @default(false)
  updated_at  DateTime  @updatedAt
}

model User {
  id           String        @id @default(uuid()) @map("_id")
  display_name String
  email        String        @unique
  dni          String        @unique
  email_verify Boolean       @default(false)
  first_name   String
  is_active    Boolean       @default(false)
  last_name    String
  password     String
  phone        String?
  phone_area   String?
  address      String?
  user_name    String        @unique
  Profiles     UserProfile[]
  created_at   DateTime      @default(now())
  deleted_at   DateTime?
  is_deleted   Boolean       @default(false)
  updated_at   DateTime      @updatedAt
  Avatar       Avatar?
  is_new       Boolean       @default(true)

  @@map("users")
}

model UserProfile {
  id         String    @id @default(uuid()) @map("_id")
  role       EUserRole
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  active     Boolean   @default(false)
  user_id    String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  updated_at DateTime  @updatedAt

  @@map("user_profiles")
}

model File {
  id         String    @id @default(uuid()) @map("_id")
  bucket     String?
  charter    String?
  color      String?
  extension  String?
  is_public  Boolean   @default(true)
  key        String?
  mimetype   String?
  name       String
  size       Int?
  type       String?
  url        String?
  created_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  updated_at DateTime  @updatedAt
  Avatar     Avatar[]

  @@map("files")
}

model Counter {
  id  String @id @default(uuid()) @map("_id")
  seq Int    @default(0)
}

model Avatar {
  User    User   @relation(fields: [user_id], references: [id])
  File    File   @relation(fields: [file_id], references: [id])
  file_id String
  user_id String @unique

  @@id([file_id, user_id])
}
