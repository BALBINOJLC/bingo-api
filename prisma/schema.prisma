// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EUserRole {
  ADMIN
  CLIENT
  OWNER
  USER
  SUPER_ADMIN
  GUEST
}

enum EUserStatus {
  AUTORIZED
  PENDING
  CHEKING
  LOCKED
  REJECTED
}

// Nuevos enums para el bingo
enum EBingoStatus {
  INACTIVE
  IN_PROGRESS
  ACTIVE
}

enum ETicketStatus {
  PROCESSING_SOLD
  AVAILABLE
  SOLD
  USED
  CANCELLED
  GAIN
}

enum ECartonStatus {
  PROCESSING_SOLD
  AVAILABLE
  SOLD
  USED
  CANCELLED
}

model Base {
  id          String    @id @default(uuid()) @map("_id")
  name        String
  description String
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  is_deleted  Boolean   @default(false)
  updated_at  DateTime  @updatedAt
}

model User {
  id           String     @id @default(uuid()) @map("_id")
  display_name String
  email        String     @unique
  dni          String     @unique
  email_verify Boolean    @default(false)
  first_name   String
  is_active    Boolean    @default(false)
  last_name    String
  password     String
  phone        String?
  phone_area   String?
  address      String?
  user_name    String     @unique
  role         EUserRole  @default(CLIENT)
  created_at   DateTime   @default(now())
  deleted_at   DateTime?
  is_deleted   Boolean    @default(false)
  updated_at   DateTime   @updatedAt
  Avatar       Avatar?
  is_new       Boolean    @default(true)
  Tickets      Ticket[]
  payments     payments[]

  @@map("users")
}

model File {
  id         String    @id @default(uuid()) @map("_id")
  bucket     String?
  charter    String?
  color      String?
  extension  String?
  is_public  Boolean   @default(true)
  key        String?
  mimetype   String?
  name       String
  size       Int?
  type       String?
  url        String?
  created_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  updated_at DateTime  @updatedAt
  Avatar     Avatar[]

  @@map("files")
}

model Counter {
  id  String @id @default(uuid()) @map("_id")
  seq Int    @default(0)
}

model Avatar {
  User    User   @relation(fields: [user_id], references: [id])
  File    File   @relation(fields: [file_id], references: [id])
  file_id String
  user_id String @unique

  @@id([file_id, user_id])
}

// Modelos para el bingo
model BingoEvent {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  description String
  start_date  String
  end_date    String
  time_start  String
  time_end    String
  status      EBingoStatus
  prize_pool  Float        @default(0)
  commission  Float        @default(0)
  cartons     Carton[] // Relación con los cartones
  tickets     Ticket[] // Relación con los tickets vendidos
  image_url   String?
  numbers     Int[]
  created_at  DateTime     @default(now())
  deleted_at  DateTime?
  is_deleted  Boolean      @default(false)
  updated_at  DateTime     @updatedAt

  @@map("bingo_events")
}

model Carton {
  id       Int           @id @default(autoincrement()) @map("_id")
  status   ECartonStatus
  event    BingoEvent    @relation(fields: [event_id], references: [id])
  event_id String
  numbers  Int[]
  Ticket   Ticket?
  ticketId String?
  price    String?

  @@map("cartons")
}

model Ticket {
  id        String        @id @default(uuid()) @map("_id")
  status    ETicketStatus
  user      User          @relation(fields: [user_id], references: [id])
  user_id   String
  event     BingoEvent    @relation(fields: [event_id], references: [id])
  event_id  String
  carton    Carton?       @relation(fields: [carton_id], references: [id])
  carton_id Int?          @unique

  reference_payment String?
  number_payment    String?
  amount_payment    String?

  error_logs Json?

  created_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  updated_at DateTime  @updatedAt

  @@map("tickets")
}

model payments {
  id                   String    @id @default(uuid()) @map("_id")
  reference_payment    String
  number_payment       String
  amount_payment       String
  validations_response Json
  user                 User      @relation(fields: [user_id], references: [id])
  user_id              String
  created_at           DateTime  @default(now())
  deleted_at           DateTime?
  is_deleted           Boolean   @default(false)
  updated_at           DateTime  @updatedAt
}
